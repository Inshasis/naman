# Copyright (c) 2025, Hidayatali and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document


class RequestManagement(Document):
    # pass
    def validate(self):
        if self.docstatus == 0 and self.status == "Draft":
            self.notify_incharge()
            self.notify_requester()

    def on_submit(self):
        self.status = "Approved"
        self.notify_it_team()
    
    def on_cancel(self):
        self.status = "Rejected"
        self.notify_rejected()

    #Email
    def notify_incharge(self):
        # Prepare the document URL
        doc_url = frappe.utils.get_url(f"/app/request-management/{self.name}")
        
        # Log values for debugging with a concise title
        log_message = (
            f"incharge_email: {self.incharge_email}\n"
            f"incharge_name: {self.incharge_name}\n"
            f"request_id: {self.name}\n"
            f"requested_by_name: {self.requested_by_name}\n"
            f"doc_url: {doc_url}"
        )
        frappe.log_error(title="Notify Incharge Debug", message=log_message)
        
        # HTML email template
        html_message = """
        <div class="container">
            <div class="header">
                <h2>New Request Notification</h2>
            </div>
            <div class="content">
                <p>Dear {incharge_name},</p>
                <p>A new request (ID: {request_id}) has been generated by {requested_by_name}.</p>
                <p>Please review the details by clicking the button below:</p>
                <button style="margin-top: 20px;background-color:lightgray;text-decoration: none;
                    border-radius: 6px;
                    font-weight: bold;
                    font-size: 16px;
                    text-align: center;"><a href="{doc_url}" class="button">Open Document</a></button>
            </div>
            <div class="footer">
                <p>This is an automated email. Please do not reply directly to this message.</p>
            </div>
        </div>
        
        """.format(
            incharge_name=self.incharge_name or "Team Member",
            request_id=self.name,
            requested_by_name=self.requested_by_name,
            doc_url=doc_url
        )

        # Send email
        frappe.sendmail(
            recipients=[self.incharge_email],
            subject="New Request Notification",
            message=html_message
        )

    def notify_requester(self):
        frappe.sendmail(
            recipients=[self.email],
            subject="Request Submitted",
            message=f"Your request (ID: {self.name}) has been submitted successfully and is in Pending status."
        )

    def notify_it_team(self):
        # Get all users with the 'IT User' role
        it_users = frappe.get_all(
            "User",
            filters={"enabled": 1},
            fields=["email"],
            as_list=True
        )
        
        # Get emails of users with IT User role
        it_user_emails = []
        for user in it_users:
            roles = frappe.get_roles(user[0])
            if "IT User" in roles:
                it_user_emails.append(user[0])
        
        # Send email to all IT Users
        if it_user_emails:
            frappe.sendmail(
                recipients=it_user_emails,
                subject="Request Approved",
                message=f"Request (ID: {self.name}) has been approved and assigned to IT team."
            )

    def notify_rejected(self):
        frappe.sendmail(
            recipients=[self.email],
            subject="Request Rejected",
            message=f"Request (ID: {self.name}) has been Rejected.."
        )



#Custom Button Triger
@frappe.whitelist()
def submit_request(docname):
    # Load the document
    doc = frappe.get_doc("Request Management", docname)
    
    # Check if the document is in Draft state
    if doc.docstatus != 0:
        frappe.throw("Request can only be submitted from Draft state")
    
    # Update status to Pending and submit
    doc.status = "Pending"
    doc.save()
    doc.submit()
    frappe.db.commit()
    
    return {"status": "success", "message": "Request submitted successfully"}

@frappe.whitelist()
def approve_request(docname,remark):
    try:
        # Load the document
        doc = frappe.get_doc("Request Management", docname)
        
        # Check if the document is in Pending state
        if doc.status != "Pending":
            frappe.throw("Request can only be approved from Pending state")
        
        # Use apply_workflow to trigger the workflow transition
        frappe.get_doc({
            "doctype": "Workflow Action",
            "reference_doctype": "Request Management",
            "reference_name": docname,
            "workflow_state": "Approved"
        }).insert(ignore_permissions=True)

        frappe.get_doc({
            "doctype": "Comment",
            "comment_type": "Comment",
            "reference_doctype": doc.doctype,
            "reference_name": doc.name,
            "content": remark,
            "comment_by": frappe.session.user
        }).insert(ignore_permissions=True)
        
        # Apply the workflow action
        frappe.db.set_value("Request Management", docname, "workflow_state", "Approved")
        frappe.db.set_value("Request Management", docname, "status", "Approved")
        frappe.db.commit()
        
        return {"status": "success", "message": "Request approved successfully"}
    
    except Exception as e:
        frappe.log_error(f"Error approving request {docname}: {str(e)}")
        frappe.throw(f"Failed to approve request: {str(e)}")

@frappe.whitelist()
def reject_request(docname,remark):
    try:
        # Load the document
        doc = frappe.get_doc("Request Management", docname)
        if doc.docstatus != 1:
            frappe.throw("Request can only be rejected from Pending state")
        
        # Use apply_workflow to trigger the workflow transition
        frappe.get_doc({
            "doctype": "Workflow Action",
            "reference_doctype": "Request Management",
            "reference_name": docname,
            "workflow_state": "Rejected"
        }).insert(ignore_permissions=True)

        frappe.get_doc({
            "doctype": "Comment",
            "comment_type": "Comment",
            "reference_doctype": doc.doctype,
            "reference_name": doc.name,
            "content": remark,
            "comment_by": frappe.session.user
        }).insert(ignore_permissions=True)
        
        # Apply the workflow action
        frappe.db.set_value("Request Management", docname, "workflow_state", "Rejected")
        frappe.db.set_value("Request Management", docname, "status", "Rejected")
        frappe.db.set_value("Request Management", docname, "docstatus", 2)
        frappe.db.commit()
        
        return {"status": "success", "message": "Request rejected successfully"}
    
    except Exception as e:
        frappe.log_error(f"Error rejecting request {docname}: {str(e)}")
        frappe.throw(f"Failed to reject request: {str(e)}")